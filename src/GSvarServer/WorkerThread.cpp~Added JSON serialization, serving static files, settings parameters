#include "WorkerThread.h"

WorkerThread::WorkerThread(Request request)
	: request_(request)
{
}

QString WorkerThread::findSampleById(QString folder_name, QString id)
{
	QString needed_file = id.split(".")[0].trimmed().toLower() + ".gsvar";
	QDir dir(folder_name);
	if (!dir.exists())
	{
		return "";
	}

	dir.setFilter(QDir::Dirs | QDir::Files | QDir::Hidden | QDir::NoSymLinks);

	QFileInfoList list = dir.entryInfoList();
	QList<FolderItem> files {};
	for (int i = 0; i < list.size(); ++i) {
		QFileInfo fileInfo = list.at(i);
		if ((fileInfo.fileName() == ".") || (fileInfo.fileName() == "..")) continue;

		if (fileInfo.isDir())
		{
			QString result = findSampleById(folder_name + fileInfo.fileName() + "/", id);
			if (!result.isEmpty()) return result;
		}

		qDebug() << "File: " << fileInfo.fileName().toLower().trimmed();
		if ((fileInfo.isFile()) && (fileInfo.fileName().toLower().trimmed() == needed_file))
		{
			return folder_name+fileInfo.fileName();
		}
	}
	return "";
}

void WorkerThread::processRequest()
{	
	QByteArray body {};
	qInfo().noquote() << WebEntity::convertMethodTypeToString(request_.method).toUpper() << "/" << request_.path;

	Endpoint current_endpoint = EndpointManager::getEndpointEntity(request_.path, request_.method);
	if (current_endpoint.action_func == nullptr)
	{
		emit resultReady(WebEntity::createError(ErrorType::BAD_REQUEST, request_.return_type, "This action cannot be processed"));
		return;
	}

	try
	{
		EndpointManager::validateInputData(&current_endpoint, request_);
	}
	catch (ArgumentException& e)
	{
		emit resultReady(WebEntity::createError(ErrorType::BAD_REQUEST, request_.return_type, e.message()));
		return;
	}

	endpoint_action_ = current_endpoint.action_func;
	Response response = (*endpoint_action_)(request_);
	if (!response.body.isNull())
	{
		emit resultReady(response);
		return;
	}

	emit resultReady(WebEntity::createError(ErrorType::NOT_FOUND, request_.return_type, "This page does not exist. Check the URL and try again"));
}

void WorkerThread::run()
{
	qDebug() << "Processing path:" << request_.path;
	processRequest();
}
